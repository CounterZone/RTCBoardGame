{"version":3,"file":"component---src-pages-ultimate-tic-tac-toe-js-e24b9f889ce66e745a32.js","mappings":"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","sources":["webpack://rtc_boardgame/./src/src/ten/tenAI.js","webpack://rtc_boardgame/./src/src/ten/ten.js","webpack://rtc_boardgame/./src/pages/ultimate-tic-tac-toe.js"],"sourcesContent":["const lines = [\r\n[0, 1, 2],\r\n[3, 4, 5],\r\n[6, 7, 8],\r\n[0, 3, 6],\r\n[1, 4, 7],\r\n[2, 5, 8],\r\n[0, 4, 8],\r\n[2, 4, 6],\r\n];\r\nconst gridToLines={\r\n0:[0,3,6],\r\n1:[0,4],\r\n2:[0,5,7],\r\n3:[1,3],\r\n4:[1,4,6,7],\r\n5:[1,5],\r\n6:[2,3,7],\r\n7:[2,4],\r\n8:[2,5,6]\r\n}\r\n\r\nvar b1=[' ',' ',' ',' ',' ',' ',' ',' ',' '];\r\nvar s=[];\r\nfor (var i=0;i<9;i++) {s.push(b1.slice());}\r\n\r\nconst initialState={\r\n  \"gridState\":s,\r\n  \"nextPlayer\":\"o\",\r\n  \"nextSubboard\":null,\r\n  \"subboardState\":[' ',' ',' ',' ',' ',' ',' ',' ',' '],  //' ' means can be choosed; 'o' or 'x' mean owned; 'f' means full\r\n  \"winner\":null,\r\n}\r\n\r\n/*\r\n\r\nscore for each player:\r\nthe linescore of the board(or subboard) is the sum of the score of each line(horizonal, vertical, diagonal).\r\nthe linescore of a line: if this line is \"impossible\"(occupied by opponent), then 0\r\n                      else, 10 if need 1 step to win and 1 if need 2 step to win\r\n\r\nThen, the totalscore for a player is the linescore of each subboard + the linescore of the board * 50\r\nThen, the gamescore is the score of player \"o\" - the score of player \"x\". i e, only the score for \"o\" is maintained\r\n\r\n\r\nupon searching, maintain and uptate the linescore for each subboard to save time.\r\n\r\n\r\n*/\r\n\r\nclass tenAI{\r\n  constructor(gameState=initialState){\r\n    this.gameState=gameState;\r\n  }\r\n  copyGameState(){\r\n    var gs={};\r\n\r\n    return gs;\r\n  }\r\n  checkWin(board){\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if ((board[a]===\"o\" || board[a]===\"x\")  && board[a] === board[b] && board[a] === board[c]) {\r\n        return board[a];\r\n      }\r\n    }\r\n    return \" \";\r\n  }\r\n  updateSubboardStatus(subboard){\r\n    var winner=this.checkWin(this.gameState.gridState[subboard]);\r\n    if (winner!==this.gameState.subboardState[subboard]){\r\n    this.gameState.subboardState[subboard]=winner;\r\n    return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  collectNextMoves(){\r\n    var moves=[];\r\n    if(this.gameState.nextSubboard===null){\r\n      for (let i=0;i<9;i+=1)\r\n        if(this.gameState.subboardState[i]===\" \")\r\n          for (let j=0;j<9;j+=1)\r\n             if(this.gameState.gridState[i][j]==\" \") moves.push([i,j]);\r\n           }\r\n    else{\r\n      for (let j=0;j<9;j+=1)\r\n       if(this.gameState.gridState[this.gameState.nextSubboard][j]===\" \") moves.push([this.gameState.nextSubboard,j]);\r\n     }\r\n    return moves;\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nclass MinimaxAI extends tenAI{\r\n  constructor(gameState=initialState,maxDepth=6){\r\n    super(gameState);\r\n    this.maxDepth=maxDepth;\r\n    this.gameState.nextSubboardHistory=[];\r\n    this.subboardLineScore=[0,0,0,0,0,0,0,0,0];\r\n    this.totalScore=0;\r\n    this.boardLineScore=0;\r\n    this.updateScore();\r\n  }\r\n\r\n  updateScore(){\r\n    for (let i =0;i<9;i+=1){\r\n      this.updateSubboardLineScore(i);\r\n    }\r\n    this.updateBoardLineScore();\r\n  }\r\n\r\n  calculateLineScore(line){\r\n    line.sort();\r\n    line=line.join(\"\");\r\n    const lineScore={\r\n      \"  o\":1,\r\n      \" oo\":10,\r\n      \"  x\":-1,\r\n      \" xx\":-10,\r\n    }\r\n    var s=lineScore[line];\r\n    return s===undefined?0:s;\r\n  }\r\n\r\n\r\n\r\n\r\n  updateSubboardLineScore(subboard){\r\n  var score=0;\r\n      for (let lineID of lines){\r\n        var line=this.gameState.gridState[subboard].filter((elem,ind)=>lineID.includes(ind));\r\n        score+=this.calculateLineScore(line);\r\n      }\r\n      this.totalScore-=this.subboardLineScore[subboard];\r\n      this.subboardLineScore[subboard]=score;\r\n      this.totalScore+=score;\r\n  }\r\n\r\n\r\n  updateBoardLineScore(){\r\n        var score=0;\r\n        var winner=this.checkWin(this.gameState.subboardState);\r\n        if (winner!==\" \"){\r\n          this.boardLineScore=winner==\"o\"?10000:-10000;\r\n          this.totalScore=this.boardLineScore*50;\r\n          return\r\n        }\r\n        for (let lineID of lines){\r\n          var line=this.gameState.subboardState.filter((elem,ind)=>lineID.includes(ind));\r\n          score+=this.calculateLineScore(line);\r\n        }\r\n        this.totalScore-=this.boardLineScore*50;\r\n        this.boardLineScore= score;\r\n        this.totalScore+=score*50;\r\n\r\n  }\r\n\r\n\r\n\r\n  doMove(subboardID,gridID){\r\n    this.gameState.gridState[subboardID][gridID]=this.gameState.nextPlayer;\r\n    if (this.updateSubboardStatus(subboardID)) this.updateBoardLineScore();\r\n    this.updateSubboardLineScore(subboardID);\r\n    this.gameState.nextPlayer=this.gameState.nextPlayer===\"o\"?\"x\":\"o\";\r\n    this.gameState.nextSubboardHistory.push(this.gameState.nextSubboard);\r\n    this.gameState.nextSubboard=this.gameState.subboardState[gridID]===\" \"?gridID:null;\r\n  }\r\n\r\n  undoMove(subboardID,gridID){\r\n    this.gameState.nextPlayer=this.gameState.nextPlayer===\"o\"?\"x\":\"o\";\r\n    this.gameState.gridState[subboardID][gridID]=' ';\r\n    if (this.updateSubboardStatus(subboardID)) this.updateBoardLineScore();\r\n    this.updateSubboardLineScore(subboardID);\r\n    this.gameState.nextSubboard=this.gameState.nextSubboardHistory.pop();\r\n  }\r\n\r\n  minimax(depth, alpha, beta, player){\r\n    var moves=this.collectNextMoves();\r\n    var score=0; var bestMove=null;\r\n    if (moves.length === 0 || depth === this.maxDepth) {\r\n\t\t    score = player===\"o\"?this.totalScore:(-this.totalScore);\r\n\t\t      return {\r\n\t\t\t           score: score,\r\n\t\t\t           move: null\r\n\t\t             };\r\n\t   }\r\n     for(let move of moves){\r\n\r\n       this.doMove(move[0],move[1]);\r\n       score=this.minimax(depth+1,alpha,beta,player).score;\r\n       this.undoMove(move[0],move[1]);\r\n\r\n       if(this.gameState.nextPlayer===player){\r\n          if (alpha<score){\r\n            alpha=score;\r\n            bestMove=move;\r\n          }\r\n       }else{\r\n         if (beta>score){\r\n           beta=score;\r\n           bestMove=move;\r\n         }\r\n       }\r\n\r\n       if (alpha>=beta) break;\r\n     }\r\n\r\n     return {\r\n             score: this.gameState.nextPlayer===player?alpha:beta,\r\n             move: bestMove\r\n             };\r\n\r\n  }\r\n\r\n\r\n  makeNextMove(){\r\n    return this.minimax(0,-100000,100000,this.gameState.nextPlayer).move;\r\n  }\r\n}\r\n\r\n\r\nclass MCTreeAI extends tenAI{\r\n  constructor(gameState=initialState,maxSearch=10000){\r\n    super(gameState);\r\n    this.maxSearch=maxSearch;\r\n  }\r\n\r\n}\r\n\r\n\r\nexport {MinimaxAI,MCTreeAI};\r\n","import * as React from \"react\"\r\nimport Game from '../game_template';\r\nimport {Button,ListGroup,Row,Container,Col} from 'react-bootstrap';\r\nimport{MinimaxAI} from \"./tenAI\"\r\n\r\n\r\nconst majorLineStyle={\r\n\r\n\"stroke\":\"#FFFFFF\",\r\n\"strokeWidth\":\"1\"\r\n\r\n}\r\n\r\nconst minorLineStyle={\r\n\r\n\"stroke\":\"#EFEFEF\",\r\n\"strokeWidth\":\"0.5\"\r\n\r\n}\r\n\r\n\r\nvar b1=[' ',' ',' ',' ',' ',' ',' ',' ',' '];\r\nvar s=[];\r\nfor (var i=0;i<9;i++) {s.push(b1.slice());}\r\n\r\nvar globalGameState={\r\n\"gridState\":s,\r\n\"nextPlayer\":\"o\",\r\n\"playerSymbol\":\"o\",\r\n\"playerSymbolSelected\":false,\r\n\"nextSubboard\":null,\r\n\"subboardState\":[' ',' ',' ',' ',' ',' ',' ',' ',' '],  //' ' means can be choosed; 'o' or 'x' mean owned; 'f' means full\r\n\"winner\":null\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass InfoBoard extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state={\r\n    \"gameState\":globalGameState,\r\n    \"remotePlayerConnected\":false,\r\n    \"receivedResetRequest\":false,\r\n    \"sentResetRequest\":false\r\n    }\r\n\r\n  }\r\n  static getDerivedStateFromProps  (props,state){\r\n    return ({'remotePlayerConnected':props.remotePlayerConnected})\r\n  }\r\n  onMove(move){\r\n    if (move.type===\"reset\"){\r\n      this.setState({receivedResetRequest:true});\r\n      if(this.state.sentResetRequest){\r\n        this.reset();\r\n      }\r\n    }\r\n  }\r\n  restart(self){\r\n    if (!self.state.remotePlayerConnected){\r\n      self.reset();\r\n      return\r\n    }\r\n\r\n    if (self.state.receivedResetRequest){\r\n      self.props.sendMove({type:\"reset\"});\r\n      self.reset();\r\n    }\r\n\r\n    else{\r\n      this.props.sendChat(\"Restart?\");\r\n      this.props.sendMove({type:\"reset\"});\r\n      this.setState({sentResetRequest:true});\r\n    }\r\n\r\n  }\r\n  reset(){\r\n    var b1=[' ',' ',' ',' ',' ',' ',' ',' ',' '];\r\n    var s=[];\r\n    for (var i=0;i<9;i++) {s.push(b1.slice());}\r\n\r\n    globalGameState={\r\n    \"gridState\":s,\r\n    \"nextPlayer\":\"o\",\r\n    \"playerSymbol\":\"o\",\r\n    \"playerSymbolSelected\":false,\r\n    \"nextSubboard\":null,\r\n    \"subboardState\":[' ',' ',' ',' ',' ',' ',' ',' ',' '],  //' ' means can be choosed; 'o' or 'x' mean owned; 'f' means full\r\n    \"winner\":null\r\n    }\r\n    this.setState({\r\n    \"gameState\":globalGameState,\r\n    \"receivedResetRequest\":false,\r\n    \"sentResetRequest\":false\r\n    });\r\n    this.props.gameBoardRef.current.setState({\"gameState\":globalGameState});\r\n    this.props.log(\"Restarted!\");\r\n  }\r\n  AIMove(self){\r\n      var ai=new MinimaxAI(this.state.gameState);\r\n      var aiMove=ai.makeNextMove();\r\n      if (aiMove!=null){\r\n      this.props.gameBoardRef.current.makeMove(aiMove[0],aiMove[1]);\r\n    }\r\n  }\r\n  render(){\r\n    var info=\"\";\r\n    if (this.state.gameState.winner !==null){\r\n      info=\"Winner: \"+this.state.gameState.winner + \"!\";\r\n    }\r\n    else if (this.state.remotePlayerConnected===true){\r\n      info=\"Current Player: \";\r\n      if(this.state.gameState.playerSymbolSelected===false){\r\n      info+=\"local (o)\"\r\n      }else{\r\n        if (this.state.gameState.nextPlayer==this.state.gameState.playerSymbol){\r\n          info+= \"local (\" + this.state.gameState.nextPlayer + \")\";\r\n        }else{\r\n          info+= \"remote (\" + this.state.gameState.nextPlayer + \")\";\r\n        }\r\n\r\n      }\r\n    }else{\r\n      info=\"Playing locally.\";\r\n    }\r\n\r\n    const infoStyle={\r\n      position: 'relative',\r\n      marginTop:\"2vh\",\r\n\r\n    }\r\n    const buttonStyle={\r\n      float:\"right\"\r\n\r\n    }\r\n    return (\r\n      <div style={infoStyle} >\r\n      <Container>\r\n     <span >\r\n       {info}\r\n     </span>\r\n     <Button style={buttonStyle} size=\"sm\" title=\"Make next move by a minimax AI with search depth = 6\" variant=\"outline-secondary\" disabled={this.state.remotePlayerConnected} onClick={()=>this.AIMove(this)}>\r\n       AI 1\r\n     </Button>\r\n     <Button style={buttonStyle} size=\"sm\" variant=\"outline-primary\" onClick={()=>this.restart(this)}>\r\n       Restart\r\n     </Button>\r\n       </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nclass Board extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.paintBox=React.createRef();\r\n\r\n    this.state={\"width\":\"100\",\r\n    \"height\":\"100\",\r\n    \"gameState\":globalGameState,\r\n    \"remotePlayerConnected\":false\r\n    }\r\n\r\n  }\r\n  static getDerivedStateFromProps  (props,state){\r\n    return ({'remotePlayerConnected':props.remotePlayerConnected})\r\n  }\r\n  onClick(subboard,piece){\r\n    if (this.state.remotePlayerConnected===true){\r\n      if (this.state.gameState.nextPlayer===this.state.gameState.playerSymbol){\r\n        this.makeMove(subboard,piece)\r\n        }\r\n    }else{\r\n      this.makeMove(subboard,piece);\r\n    }\r\n  }\r\n\r\n\r\n  checkWin(array){ // return the winner ('o' or 'x') or null\r\n    const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if ((array[a]===\"o\" || array[a]===\"x\")  && array[a] === array[b] && array[a] === array[c]) {\r\n      return array[a];\r\n    }\r\n  }\r\n  return null;\r\n  }\r\n\r\n  sendMove(state){\r\n    this.props.sendMove({type:\"move\",newState:state});\r\n  }\r\n  onMove(move){\r\n    if(move.type===\"move\"){\r\n          var newState=move.newState;\r\n          var s=this.state.gameState;\r\n          if(!s.playerSymbolSelected){\r\n            newState.playerSymbol=\"x\";\r\n            newState.playerSymbolSelected=true;\r\n          }else{\r\n            newState.playerSymbol=s.playerSymbol;\r\n          }\r\n\r\n\r\n          this.setState({gameState:newState});\r\n          this.props.gameInfoPanelRef.current.setState({gameState:newState});\r\n        }\r\n  }\r\n\r\n\r\n  makeMove(subboard,piece){\r\n    if (this.state.gameState.winner!==null)return;\r\n    var s=this.state.gameState;\r\n\r\n\r\n    s.gridState[subboard][piece]=s.nextPlayer;\r\n\r\n    var winner =this.checkWin(s.gridState[subboard]);\r\n    if(winner!==null){ // someone win this subboard\r\n      s.subboardState[subboard]=winner;\r\n\r\n      winner=this.checkWin(s.subboardState);\r\n      if(winner!==null){\r\n        s.winner=winner\r\n\r\n      }\r\n    } else if (!s.gridState[subboard].includes(' ')){  // check if subboard is full\r\n      s.subboardState[subboard]=\"f\";\r\n      }\r\n\r\n      s.nextPlayer= s.nextPlayer===\"o\"?\"x\":\"o\";\r\n      s.nextSubboard=s.subboardState[piece]===\" \"?piece:null;\r\n      if(this.state.remotePlayerConnected && !s.playerSymbolSelected){\r\n        s.playerSymbolSelected=true;\r\n      }\r\n\r\n      this.setState({gameState:s});\r\n      this.props.gameInfoPanelRef.current.setState({gameState:s});\r\n\r\n      if(this.state.remotePlayerConnected){\r\n        this.sendMove(s);\r\n      }\r\n\r\n  }\r\n\r\n    componentDidMount() {\r\n      var w=Math.min(this.paintBox.current.offsetWidth,this.paintBox.current.offsetHeight);\r\n      this.setState({\"width\":w,\"height\":w})\r\n    }\r\n\r\n\r\n    render(){\r\n      const boxstyle={\r\n        width:'100%',\r\n        height:'100%',\r\n      }\r\n      var svgstyle={\r\n        margin:\"auto\",\r\n        display: \"block\",\r\n        width:this.state.width,\r\n        height:this.state.height,\r\n      }\r\n\r\n      var subboard=[];\r\n      for (let i=0;i<9;i++){\r\n        var x=Math.floor(i/3);\r\n        var y=i%3;\r\n        var isNextSubboard =  (this.state.gameState.winner==null)&&\r\n        (this.state.gameState.subboardState[i]===\" \") &&\r\n        ((i===this.state.gameState.nextSubboard) ||( this.state.gameState.nextSubboard===null));\r\n\r\n        subboard.push(\r\n          <Subboard key={i} x={5+x*30} y={5+y*30}\r\n          ownedStatus={this.state.gameState.subboardState[i]}\r\n          status={this.state.gameState.gridState[i]}\r\n          isNextSubboard={isNextSubboard}\r\n          nextPlayer={this.state.gameState.nextPlayer}\r\n          onClick={(p)=>this.onClick(i,p)}/>);\r\n      }\r\n\r\n    return (\r\n      <div ref={this.paintBox} style={boxstyle}>\r\n    <svg viewBox=\"0 0 100 100\" style={svgstyle}>\r\n    <line x1=\"35\" y1=\"5\" x2=\"35\" y2=\"95\" style={majorLineStyle} />\r\n    <line x1=\"65\" y1=\"5\" x2=\"65\" y2=\"95\" style={majorLineStyle} />\r\n    <line x1=\"5\" y1=\"35\" x2=\"95\" y2=\"35\" style={majorLineStyle} />\r\n    <line x1=\"5\" y1=\"65\" x2=\"95\" y2=\"65\" style={majorLineStyle} />\r\n\r\n    {subboard}\r\n\r\n\r\n    </svg>\r\n    </div>\r\n    );\r\n\r\n}\r\n\r\n}\r\n\r\nclass Subboard extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\"status\":this.props.status}\r\n  }\r\n\r\n  static getDerivedStateFromProps  (props,state){\r\n    return ({'status':props.status})\r\n  }\r\nonClick(i){\r\nthis.props.onClick(i);\r\n}\r\nrender(){\r\n\r\n  if (this.props.ownedStatus=='o'){  // is owned by o\r\n  return (<circle cx={this.props.x+15} cy={this.props.y+15} r=\"14\" stroke=\"red\" strokeWidth=\"1.5\" fill=\"none\"/>);\r\n  }\r\n  else if (this.props.ownedStatus=='x'){ //is owned by x\r\n  return (<g>\r\n  <line x1={this.props.x+1} y1={this.props.y+1} x2={this.props.x+29} y2={this.props.y+29} stroke=\"blue\" strokeWidth=\"1.5\"/>;\r\n  <line x1={this.props.x+29} y1={this.props.y+1} x2={this.props.x+1} y2={this.props.y+29} stroke=\"blue\" strokeWidth=\"1.5\"/>;\r\n  </g>);\r\n  }\r\n\r\nvar center_x=[this.props.x+7,this.props.x+15,this.props.x+23];\r\nvar center_y=[this.props.y+7,this.props.y+15,this.props.y+23];\r\n\r\nvar marker=\"\";\r\n\r\n\r\nif (this.props.isNextSubboard){\r\n  var color=this.props.nextPlayer==='o'?\"red\":\"blue\";\r\n  marker=<rect x= {this.props.x+1} y={this.props.y+1} height=\"28\" width=\"28\"  strokeWidth=\"0.5\" stroke={color} fill=\"none\"/>\r\n}\r\nvar grid=[];\r\nfor (let i=0;i<9;i++){\r\n  let x=Math.floor(i/3);\r\n  let y=i%3;\r\n  grid.push(  <Grid key={i} x={center_x[x]} y={center_y[y]} status={this.state.status[i]} onClick={()=>this.onClick(i)} isActive={this.props.isNextSubboard}/>);\r\n}\r\nreturn (\r\n\r\n  <g>\r\n  <line x1={this.props.x+11} y1={this.props.y+3} x2={this.props.x+11} y2={this.props.y+27} style={minorLineStyle} />\r\n  <line x1={this.props.x+19} y1={this.props.y+3} x2={this.props.x+19} y2={this.props.y+27} style={minorLineStyle} />\r\n  <line x1={this.props.x+3} y1={this.props.y+11} x2={this.props.x+27} y2={this.props.y+11} style={minorLineStyle} />\r\n  <line x1={this.props.x+3} y1={this.props.y+19} x2={this.props.x+27} y2={this.props.y+19} style={minorLineStyle} />\r\n  {grid}\r\n  {marker}\r\n  </g>\r\n)\r\n\r\n}\r\n\r\n}\r\n\r\n\r\nclass Grid extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={'status':this.props.status} // \" \" or \"o\"(red)  or  \"x\"(blue)\r\n  }\r\n  static getDerivedStateFromProps  (props,state){\r\n    return ({'status':props.status})\r\n  }\r\n  onClick(self){\r\n    self.props.onClick();\r\n  }\r\n\r\n  render(){\r\n\r\n    var marker =\"\";\r\n    if (this.props.isActive){\r\n      marker= <rect x={this.props.x-3} y={this.props.y-3} width=\"6\" height=\"6\" fillOpacity=\"0\"\r\n    onClick={()=>{this.onClick(this)}} />;\r\n  }\r\n\r\n    const radius=3;\r\n\r\n    if (this.state.status===\"o\"){\r\n      marker=<circle cx={this.props.x} cy={this.props.y} r={radius} stroke=\"red\" strokeWidth=\"0.7\" fill=\"none\"/>;\r\n    }\r\n    else if (this.state.status===\"x\"){\r\n      marker=<g>\r\n      <line x1={this.props.x-radius} y1={this.props.y-radius} x2={this.props.x+radius} y2={this.props.y+radius} stroke=\"blue\" strokeWidth=\"0.7\"/>;\r\n      <line x1={this.props.x+radius} y1={this.props.y-radius} x2={this.props.x-radius} y2={this.props.y+radius} stroke=\"blue\" strokeWidth=\"0.7\"/>;\r\n\r\n      </g>\r\n    }\r\n\r\n    return(\r\n\r\n      <g>\r\n      {marker}\r\n      </g>\r\n\r\n    );\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport {Board,InfoBoard}\r\n","import * as React from \"react\"\r\nimport Game from '../src/game_template';\r\nimport {Board,InfoBoard} from '../src/ten/ten';\r\n\r\n\r\nconst Page = () => {\r\n  return (\r\n    <main>\r\n      <title>Ultimate tic-tac-toe</title>\r\n      <Game gameBoard={Board} gameInfoPanel={InfoBoard}/>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Page\r\n"],"names":["lines","b1","s","i","push","slice","initialState","tenAI","gameState","this","copyGameState","checkWin","board","length","a","b","c","updateSubboardStatus","subboard","winner","gridState","subboardState","collectNextMoves","moves","nextSubboard","j","MinimaxAI","maxDepth","nextSubboardHistory","subboardLineScore","totalScore","boardLineScore","updateScore","updateSubboardLineScore","updateBoardLineScore","calculateLineScore","line","sort","join","undefined","score","lineID","filter","elem","ind","includes","doMove","subboardID","gridID","nextPlayer","undoMove","pop","minimax","depth","alpha","beta","player","bestMove","move","makeNextMove","majorLineStyle","minorLineStyle","globalGameState","InfoBoard","props","state","getDerivedStateFromProps","remotePlayerConnected","onMove","type","setState","receivedResetRequest","sentResetRequest","reset","restart","self","sendMove","sendChat","gameBoardRef","current","log","AIMove","aiMove","makeMove","render","info","playerSymbolSelected","playerSymbol","buttonStyle","float","style","position","marginTop","Container","Button","size","title","variant","disabled","onClick","React","Board","paintBox","piece","array","newState","gameInfoPanelRef","componentDidMount","w","Math","min","offsetWidth","offsetHeight","svgstyle","margin","display","width","height","x","floor","y","isNextSubboard","Subboard","key","ownedStatus","status","p","ref","viewBox","x1","y1","x2","y2","cx","cy","r","stroke","strokeWidth","fill","center_x","center_y","marker","color","grid","Grid","isActive","fillOpacity","gameBoard","gameInfoPanel"],"sourceRoot":""}